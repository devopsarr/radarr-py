# coding: utf-8

"""
    Radarr

    Radarr API docs

    The version of the OpenAPI document: v5.12.2.9335
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from radarr.models.extra_file_type import ExtraFileType
from typing import Optional, Set
from typing_extensions import Self

class ExtraFileResource(BaseModel):
    """
    ExtraFileResource
    """ # noqa: E501
    id: Optional[StrictInt] = None
    movie_id: Optional[StrictInt] = Field(default=None, alias="movieId")
    movie_file_id: Optional[StrictInt] = Field(default=None, alias="movieFileId")
    relative_path: Optional[StrictStr] = Field(default=None, alias="relativePath")
    extension: Optional[StrictStr] = None
    language_tags: Optional[List[StrictStr]] = Field(default=None, alias="languageTags")
    title: Optional[StrictStr] = None
    type: Optional[ExtraFileType] = None
    __properties: ClassVar[List[str]] = ["id", "movieId", "movieFileId", "relativePath", "extension", "languageTags", "title", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExtraFileResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if movie_file_id (nullable) is None
        # and model_fields_set contains the field
        if self.movie_file_id is None and "movie_file_id" in self.model_fields_set:
            _dict['movieFileId'] = None

        # set to None if relative_path (nullable) is None
        # and model_fields_set contains the field
        if self.relative_path is None and "relative_path" in self.model_fields_set:
            _dict['relativePath'] = None

        # set to None if extension (nullable) is None
        # and model_fields_set contains the field
        if self.extension is None and "extension" in self.model_fields_set:
            _dict['extension'] = None

        # set to None if language_tags (nullable) is None
        # and model_fields_set contains the field
        if self.language_tags is None and "language_tags" in self.model_fields_set:
            _dict['languageTags'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExtraFileResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "movieId": obj.get("movieId"),
            "movieFileId": obj.get("movieFileId"),
            "relativePath": obj.get("relativePath"),
            "extension": obj.get("extension"),
            "languageTags": obj.get("languageTags"),
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj


